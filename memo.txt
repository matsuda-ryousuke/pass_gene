ドキュメント（モノがないのなら）、企画書提案書設計書、詳細設計はいらない
グループワークでやったレベル、知らない人に伝わるレベル
PDFベース

8/24

試験が終わった後、プレゼンの授業に移る
年末年始をはさむかどうか、ぐらい

その辺がモノの提出期限

卒業判定はCTFやる予定だけど、どんなメンバーが残るかによる

C#.NETをやる予定



  // // セクション切り替えボタン押下時、各セクションの表示
  // const pass_div_btn = document.querySelector("#pass_div_btn");
  // pass_div_btn.addEventListener("click", function () {
  //   pass_div.style.display = "block";
  //   register_div.style.display = "none";
  // });

  // // パスワードの登録画面表示ボタン押下時
  // const register_div_btn = document.querySelector("#register_div_btn");
  // register_div_btn.addEventListener("click", function () {
  //   // セッションストレージに暗号鍵フラグが登録されていなければ登録
  //   if (sessionStorage.getItem("crypted") == null) {
  //     key = window.prompt("ユーザー認証用のパスワードを入力してください。", "");
  //     if (key) {
  //       // 初期登録時にはその時刻、及びそれを元にしたソルトをローカルストレージに保存
  //       if (localStorage.getItem("crypt_date") == null) {
  //         var now = Date.now();
  //         localStorage.setItem("crypt_date", now);
  //         localStorage.setItem("salt", CryptoJS.SHA256(key + now));
  //       } else {
  //         var crypt_date = localStorage.getItem("crypt_date");
  //         var salt_test = CryptoJS.SHA256(key + crypt_date).toString();
  //         var salt = localStorage.getItem("salt");
  //         console.log(salt);
  //         console.log(salt_test);

  //         if (salt_test !== salt) {
  //           window.alert("異なる入力値です。");
  //           return;
  //         }
  //       }
  //       // セッションストレージには、暗号鍵作成フラグを登録
  //       sessionStorage.setItem("crypted", true);

  //       key_note.value = key;
  //       console.log(key);
  //       window.alert("パスワードを承認しました。");
  //       // 認証パスワードを送信しなかったらキャンセル

  //       pass_div.style.display = "none";
  //       register_div.style.display = "block";
  //       var data = Register.local_storage_get("password");

  //       Display.display_password(data);
  //     } else {
  //       window.alert("キャンセルされました。");
  //     }
  //   } else {
  //     pass_div.style.display = "none";
  //     register_div.style.display = "block";
  //     var data = Register.local_storage_get("password");

  //     Display.display_password(data);
  //   }
  // });


  ログインしているかどうか
  → 
  サーバーから、ログイン成功ならばtrue, ユーザーIDを渡す
  クライアントは、セッションストレージにそれを保存する
  →
  ダメだった
  ユーザーが自身のブラウザにて、セッションストレージにtrue, ユーザーIDを設定した状態で
  サーバーにアクセスすれば、サーバーは中身を渡してしまう。
  やっぱりセッションIDなどの仕組みは必要ではないか
  →
  セッションIDを生成し、ユーザーはそれをセッションストレージに保存？？？
  でもセッションストレージにセッション情報を保存するのは非推奨のはず。
  →メモリに保存する？
  
  ログイン状態で無理にログインしようとすれば？
  →
  まあ、別に



  ・案
  セッショントークンは、DBのユーザーテーブルに、ユーザーを紐づけて保管する。
  セッションが必要になるのは、パスワードの取得と、パスワードの登録時、削除時。

  取得が行われるタイミングは、ログイン後、パスワード登録後、削除後。
  つまり、ログイン時、パスワード登録、削除時に、本アプリのパスワードを入力させる。
  それで、入力パスワードのハッシュ値をパスフレーズとして、
  通常時はトークンを暗号化。
  パスワード取得時は、復号してサーバーに送信。

  ＋αで、トークンの時間をできるだけ短くするのも多分有効。
  通常時は暗号化しているので、トークンが流出しても、制限時間内に漏れる可能性はやや低い。


  クライアントで保持する情報
  トークン（パスフレーズにて暗号化）
  # ユーザーＩＤ（通し番号）
  
  あるいは、トークンが一意になるように設定して、
  そのトークンをユーザーＩＤ代わりとする方法もあるかも。
  一意になるようにするには→ 通し番号やタイムスタンプなどをいれてハッシュ化するか、
  トークン生成時にユーザーテーブルを参照してダブりがあれば再生成するとか。

  これならトークンが一意なわけで、ユーザーIDをクライアントにもたせる必要がない

  ユーザー検索はトークンで行える。

  トークンをサーバーに送る処理、パスワード登録削除ログイン時に、DB上のトークンの有無を確認する。
  トークンがない、削除された場合には再度ログインを求める状態になる。


  まあ結局のところ、XSSされれば何しても無駄な感じはある


ログイン時のajax
送信
mail
pass
PHP側
送られたmail, pass でログイン or サインアップ処理
成功したら、セッションIDを返す（DBのユーザーテーブルにも登録しておく）
セッションID はフロントで暗号化しておく
加えて、セッションIDの有効期限も送っておいた方がいい。
これをセッションストレージに保持しておき、ページへのアクセス時には、これと現時刻を比較する
有効期限切れの場合は、フロントのセッションIDを削除し、ログインフォームを表示する

パスワード登録時のajax
送信データ：
サービス名
パスワード
復号セッションID
PHP側
送られたセッションIDで、ユーザーテーブルからIDを取得する
→ パスワードテーブルに、取得したIDと、送られたパスワードを登録する
成功したらtrueを返す


パスワード生成時、登録するボタンでモーダルを表示。
そこで紐づけるサービス名、パスワードを入力させる。
入力させたパスワードをハッシュ化させ、パスフレーズとして、
セッションストレージのセッションIDを復号する。
また、表示中の自動生成パスワードを、暗号化する。
そして送信。


function showResult(target, message){
  target.innerHTML = message;

  // 5秒後に消す
  setTimeout(function(){
    target.innerHTML = "";
  }, 3000);
}